



Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




John is organizing a programming competition where participants need to input numbers into a system that automatically arranges them in a max heap. Additionally, John wants to keep track of how many of the entered numbers are even and how many are odd. After processing all the inputs, the system should display the numbers in max heap order, along with the count of even and odd numbers.




Help John implement this system by writing a program that builds a max heap and tracks the number of even and odd numbers.

Input format :

The first line contains an integer n, representing the number of elements John will input.

The second line contains n space-separated integers, representing the values John enters.

Output format :

The first line displays the max heap in a single line, with elements separated by spaces.

The second line displays the count of even elements in the heap.

The third line displays the count of odd elements in the heap.




Refer to the sample output for formatting specifications.

Code constraints :

1 ≤ n ≤ 10

1 ≤ values ≤ 1000

Sample test cases :
Input 1 :
6
75 24 63 56 19 53
Output 1 :
Max Heap: 75 56 63 24 19 53 
Even elements count: 2
Odd elements count: 4
Input 2 :
5
85 60 20 56 70
Output 2 :
Max Heap: 85 70 20 56 60 
Even elements count: 4
Odd elements count: 1
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
q.




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <stdio.h>





Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <stdio.h>
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int* n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <stdio.h>
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int* n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <stdio.h>
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int* n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <stdio.h>
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int* n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int& n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int& n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Joyal, a logistics manager, is responsible for optimizing the dispatch of delivery trucks based on their fuel consumption rates. To achieve this, he implements a min-heap data structure that organizes the trucks so that the one with the lowest fuel consumption is always at the top.




After selecting the most efficient truck for dispatch, Joyal needs to delete this minimum element from the min-heap and ensure that the next lowest fuel-consuming truck becomes available for the next delivery. Can you assist Joyal in automating this process efficiently?

Input format :

The first line contains an integer n, representing the number of delivery trucks.

The second line contains n space-separated integers, representing the fuel consumption rates of the trucks.

Output format :

The output prints the updated min-heap after deleting the minimum element.




Refer to the sample output for formatting specifications.

Code constraints :

The test cases will fall under the following constraints:

1 ≤ n ≤ 9

1 ≤ fuel consumption rates ≤ 100

Sample test cases :
Input 1 :
5
12 54 90 21 60
Output 1 :
21 54 90 60 
Input 2 :
8
27 21 53 12 89 22 65 56
Output 2 :
21 27 22 56 89 53 65 
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <iostream>using namespace std;
// You are using GCCvoid heapify(int arr[], int n, int i) {    //Type your code here    }void buildMinHeap(int arr[], int n) {    //Type your code here    }void deleteMin(int arr[], int& n) {    //Type your code here    }void displayHeap(int arr[], int n) {    //Type your code here    }




Question : 

Single File Programming Question

Problem Statement




Preethi is working on a project related to network optimization. She needs a program that can calculate the maximum flow between two nodes in a given network. 




Preethi decided to use the Floyd-Warshall algorithm to achieve this.




Write a program that calculates the maximum flow between two specified nodes in a network. The network is represented by a directed graph, and the program will determine the maximum flow from a source node to a sink node.

Input format :

The first line of input contains an integer, n, representing the number of nodes in the network, and m, representing the number of directed edges in the network.

The next m lines contain three integers each: u, v, and w, representing a directed edge from node u to node v with a capacity of w units.

The last line of input consists of two integers, source and sink, representing the source node and the sink node, respectively.

Output format :

If the sink node is unreachable from the source node, the output should display "Nodes are unreachable. Maximum flow is 0."

Otherwise, the output should display "Maximum flow from node [source] to [sink] is: [maximum_flow]."

Code constraints :

The test cases will fall under the following constraints:

2 ≤ n ≤ 100 (number of nodes in the network)

1 ≤ u, v ≤ n (nodes represented by integers)

0 ≤ m ≤ n*(n-1) (number of edges)

0 ≤ w ≤ 1e9 (edge capacity)

Sample test cases :
Input 1 :
3 3
0 1 1
1 2 2
0 2 5
2 1
Output 1 :
Nodes are unreachable. Maximum flow is 0.

Input 2 :
4 5
0 1 2
1 2 3
2 3 4
0 2 5
1 3 6
0 3
Output 2 :
Maximum flow from node 0 to 3 is: 8

Input 3 :
3 2
0 1 2
1 2 3
0 1
Output 3 :
Maximum flow from node 0 to 1 is: 2

Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.in cpp do not write any comments or any explanation of code #include <stdio.h>#define INF 1000000000#define MAXN 100
// You are using GCCvoid initializeGraph(int graph[MAXN][MAXN], int n) {    //Type your code here}void readEdges(int graph[MAXN][MAXN], int m) {    //Type your code here}void floydWarshall(int graph[MAXN][MAXN], int n) {    //Type your code here}void printResult(int graph[MAXN][MAXN], int source, int sink) {    //Type your code here}
